@inherits RazorRenderer.BasePage<ChameleonForms.Templates.ChameleonFormsBootstrap4Template.Params.FieldParams>
@using ChameleonForms.Templates.ChameleonFormsBootstrap4Template
@using ChameleonForms.Templates.ChameleonFormsBootstrap4Template.Params
@using Microsoft.AspNetCore.Html
@{
var isCheckboxControl = Model.FieldConfiguration.GetBagData<bool>("IsCheckboxControl");
var canBeInputGroup = Model.FieldConfiguration.GetBagData<bool>("CanBeInputGroup");
var isRadioOrCheckboxList = Model.FieldConfiguration.GetBagData<bool>("IsRadioOrCheckboxList");
var isRequired = Model.FieldMetadata != null && Model.FieldMetadata.IsRequired;
var isInputGroup = canBeInputGroup && (isRequired || Model.FieldConfiguration.GetBagData<bool>("DisplayAsInputGroup"));
var fcParams = new FieldConfigurationParams {FieldConfiguration = Model.FieldConfiguration, IsInputGroup = isInputGroup};

@:            <div class="@(isCheckboxControl ? "form-check" : "form-group")@(!Model.IsValid ? " has-error" : string.Empty)@(!string.IsNullOrEmpty(Model.FieldConfiguration.FieldContainerClasses) ? " " : "")@Model.FieldConfiguration.FieldContainerClasses">
Include<GetLabelHtml, LabelParams>(new LabelParams
{
    Label = Model.LabelHtml,
    HasLabel = Model.FieldConfiguration.HasLabelElement,
    IsCheckboxControl = isCheckboxControl,
    DisplayDesignator = isRadioOrCheckboxList || (!isCheckboxControl && !isInputGroup),
    IsRequired = isRequired,
    RequiredDesignator = Model.RequiredDesignator
});
if (isInputGroup)
{
@:            <div class="input-group">
}
@("            ")Include<GetPrependedHtml, FieldConfigurationParams>(fcParams);@(Model.ElementHtml)if (isRequired && isCheckboxControl){@Model.RequiredDesignator}Include<GetAppendedHtml, FieldConfigurationParams>(fcParams);
if (isInputGroup)
{
    if (isRequired)
    {<div class="input-group-append required"><span class="input-group-text">@Model.RequiredDesignator</span>
</div>
}
@:            </div>
}
else
{
@:
}
@("            ")Include<GetHint, FieldConfigurationParams>(fcParams);
@: @Model.ValidationHtml
if (Model.RenderMode == FieldRenderMode.BeginField)
{
@:            <div class="row nested-fields">
@:                <div class="col-xs-1"></div>
@:                <div class="col-xs-11">
}
else
{
@:            </div>
}
}
