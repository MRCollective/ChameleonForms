@using System.Web.Mvc
@using Component.Config
@using Enums
@using Templates.TwitterBootstrap3

@* Generator: MvcHelper *@

@* The @:'s are to stop compilation errors with the Razor engine due to unclosed HTML tags *@

@helper EndForm() {
@:    </form>
}

@helper BeginSection(IHtmlString title, IHtmlString leadingHtml, HtmlAttributes htmlAttributes) {
@:    <fieldset@(htmlAttributes)>
@:        <legend>@title</legend>
@:        @leadingHtml
}

@helper EndSection() {
@:    </fieldset>
}

@helper BeginNestedSection(IHtmlString title, IHtmlString leadingHtml, HtmlAttributes htmlAttributes)
{
@:    <div class="panel panel-default">
@:        <div class="panel-heading">@title</div>
@:        <div class="panel-body">
@leadingHtml
}

@helper EndNestedSection() {
@:        </div>
@:    </div>
}

@helper BeginField(IHtmlString labelHtml, IHtmlString elementHtml, IHtmlString validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid, IHtmlString requiredDesignator) {
@BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, isValid, requiredDesignator)
@:            <div class="row nested-fields">
@:                <div class="col-xs-1"></div>
@:                <div class="col-xs-11">
}

@helper EndField() {
@:                </div>
@:            </div>
@:        </div>
}

@helper GetPrependedHtml(IReadonlyFieldConfiguration fieldConfiguration) {
    if (fieldConfiguration != null) {
        foreach (var html in fieldConfiguration.PrependedHtml) {@html}
    }
}

@helper GetAppendedHtml(IReadonlyFieldConfiguration fieldConfiguration) {
    if (fieldConfiguration != null) {
        foreach (var html in fieldConfiguration.AppendedHtml) {@html}
    }
}

@helper GetHint(IReadonlyFieldConfiguration fieldConfiguration) {
    if (fieldConfiguration != null && fieldConfiguration.Hint != null) {<div class="help-block form-hint">@fieldConfiguration.Hint</div>}
}

@helper GetRequiredDesignator(bool isRequired, bool isCheckboxControl, bool isRadioOrCheckboxList, IHtmlString requiredDesignator) {
    if(isRadioOrCheckboxList) { return; }
    if(isRequired && !isCheckboxControl){<div class="input-group-addon required">@requiredDesignator</div>}
    if(isCheckboxControl && isRequired) {@requiredDesignator}
}

@helper RequiredDesignator(IReadonlyFieldConfiguration fieldConfiguration) {
<em class="required" title="Required">&lowast;</em>
}

@helper GetLabelHtml(IHtmlString labelHtml, bool hasLabel, bool isCheckboxControl, bool isRadioOrCheckboxList, bool isRequired, IHtmlString requiredDesignator) {
    var wrapLabel = !hasLabel && !isCheckboxControl;
    if (wrapLabel) {
        @:<span class="control-label">
    }
    @labelHtml
    if (isRadioOrCheckboxList && isRequired) {
        @requiredDesignator
    }
    if (wrapLabel) {
        @:</span>
    }
}

@helper BeginFieldInternal(IHtmlString labelHtml, IHtmlString elementHtml, IHtmlString validationHtml, IReadonlyFieldConfiguration fieldConfiguration, ModelMetadata fieldMetadata, bool isValid, IHtmlString requiredDesignator) {
    var isCheckboxControl = fieldConfiguration.GetBagData<bool>("IsCheckboxControl");
    var isRadioOrCheckboxList = fieldConfiguration.GetBagData<bool>("IsRadioOrCheckboxList");
    var isRequired = fieldMetadata != null && fieldMetadata.IsRequired;
    var isInputGroup = !isCheckboxControl && !isRadioOrCheckboxList && isRequired;
@:            <div class="@(isCheckboxControl ? "checkbox" : "form-group")@(!isValid ? " has-error" : string.Empty)">
              @GetLabelHtml(labelHtml, fieldConfiguration.HasLabel, isCheckboxControl, isRadioOrCheckboxList, isRequired, requiredDesignator)
              if (isInputGroup)
              {
@:            <div class="input-group">
              }
@:            @GetPrependedHtml(fieldConfiguration)@elementHtml@GetRequiredDesignator(isRequired, isCheckboxControl, isRadioOrCheckboxList, requiredDesignator)@GetAppendedHtml(fieldConfiguration)
              if (isInputGroup)
              {
@:            </div>
              }
@:            @GetHint(fieldConfiguration) @validationHtml
}

@helper Field(IHtmlString labelHtml, IHtmlString elementHtml, IHtmlString validationHtml, ModelMetadata fieldMetadata, IReadonlyFieldConfiguration fieldConfiguration, bool isValid, IHtmlString requiredDesignator) {
@BeginFieldInternal(labelHtml, elementHtml, validationHtml, fieldConfiguration, fieldMetadata, isValid, requiredDesignator)
@:            </div>
}

@helper BeginMessage(EmphasisStyle messageType, IHtmlString heading) {
@:      <div class="panel @string.Format("panel-{0}", messageType.ToString().ToLower())">
            if (!string.IsNullOrEmpty(heading.ToHtmlString()))
            {
@:          <div class="panel-heading"><h4 class="panel-title">@heading</h4></div>
            }
@:          <div class="panel-body">
}

@helper EndMessage() {
@:          </div>
@:      </div>
}

@helper BeginNavigation() {
@:        <div class="btn-group">
}

@helper EndNavigation() {
@:        </div>
}

@helper RadioList(IEnumerable<IHtmlString> items, bool isCheckbox) {
    foreach (var item in items) {
        <div class="@(isCheckbox ? "checkbox" : "radio")">@item</div>
    }
}
